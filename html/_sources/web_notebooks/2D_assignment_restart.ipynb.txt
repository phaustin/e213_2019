{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Import-the-functions-and-classes-you'll-need-from-the-build_2D_matrix-module\" data-toc-modified-id=\"Import-the-functions-and-classes-you'll-need-from-the-build_2D_matrix-module-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Import the functions and classes you'll need from the build_2D_matrix module</a></span></li><li><span><a href=\"#Import-the-state-from-the-original-notebook\" data-toc-modified-id=\"Import-the-state-from-the-original-notebook-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Import the state from the original notebook</a></span></li><li><span><a href=\"#Turn-the-npz-object-into-a-dictionary\" data-toc-modified-id=\"Turn-the-npz-object-into-a-dictionary-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Turn the npz object into a dictionary</a></span></li><li><span><a href=\"#Summary\" data-toc-modified-id=\"Summary-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>Summary</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# restarting a notebook from a checkpoint"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import the functions and classes you'll need from the build_2D_matrix module\n",
    "\n",
    "* see [vanderPlas section 13](https://jakevdp.github.io/WhirlwindTourOfPython/13-modules-and-packages.html) and\n",
    "  this [stack overflow entry on the dir function](https://stackoverflow.com/questions/1842414/why-is-dir-named-dir-in-python)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Boundary_Def', 'Problem_Def', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'avg', 'build_2D_matrix', 'index_to_row_col']\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import build_2D_matrix\n",
    "print(dir(build_2D_matrix))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from build_2D_matrix import Boundary_Def, Problem_Def, build_2D_matrix, index_to_row_col"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import the state from the original notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['n_x', 'n_y', 'poro', 'width_x', 'width_y', 'Qsource', 'c0', 'c_init', 'Diff', 'save_date', 'case_name', 'comment', 'history', 'units']\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "in_file = 'savestate.npz'\n",
    "values = np.load(in_file)\n",
    "print(list(values.keys()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Turn the npz object into a dictionary\n",
    "\n",
    "* This is a good time to review list, dictionary and set comprehensions:\n",
    "[Vanderplas section 11](https://jakevdp.github.io/WhirlwindTourOfPython/11-list-comprehensions.html)\n",
    "\n",
    "* Essentially we're doing this so we can get a nicely formatted printout of the values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_x': array(51),\n",
       " 'n_y': array(1),\n",
       " 'poro': array(0.4),\n",
       " 'width_x': array(10),\n",
       " 'width_y': array(0),\n",
       " 'Qsource': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),\n",
       " 'c0': array(1),\n",
       " 'c_init': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),\n",
       " 'Diff': array(0.01728),\n",
       " 'save_date': array('March 3, 2019', dtype='<U13'),\n",
       " 'case_name': array('1D simulation', dtype='<U13'),\n",
       " 'comment': array('simple x-only domain', dtype='<U20'),\n",
       " 'history': array('written by 2D_Assignment_Transient_Error_checkpoint.ipynb',\n",
       "       dtype='<U57'),\n",
       " 'units': array(['Diff: dmÂ²/day', 'length: dm', 'concentration: mg/L'], dtype='<U19')}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values_dict={key:value for key,value in values.items()}\n",
    "values_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "c0 = values_dict['c0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we create 4 boundaries, west has a constant concentration at c0, east has a constant boundary at 0;\n",
    "west = Boundary_Def(\"const\", val=c0)\n",
    "east = Boundary_Def(\"const\", val=0)\n",
    "\n",
    "# For 1D problem, the used boundaries are west and east.\n",
    "\n",
    "# The other south and north boundaries have a zero flux (impermeable)\n",
    "\n",
    "north = Boundary_Def(\"flux\", val=0)\n",
    "south = Boundary_Def(\"flux\", val=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_dict = {\"west\": west, \"north\": north, \"east\": east, \"south\": south}\n",
    "# The latter array bc_dict will be sent to the different functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_x, n_y = values_dict['n_x'], values_dict['n_y']\n",
    "Diff = values_dict['Diff']\n",
    "width_x, width_y = values_dict['width_x'], values_dict['width_y']\n",
    "n = n_x * n_y\n",
    "x = np.linspace(0, width_x, n_x)\n",
    "c_init = values_dict['c_init']\n",
    "D_matrix = Diff * np.ones(n)\n",
    "poro = values_dict['poro']\n",
    "prob = Problem_Def(n_x, n_y, poro, width_x, width_y)\n",
    "Qsource = values_dict['Qsource']\n",
    "A, b = build_2D_matrix(bc_dict, prob, D_matrix, Qsource)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "* modules and npz files allow you to save classes, functions and data\n",
    "\n",
    "* Note that numpy doesn't handle strings in a particularly elegant manner, and that\n",
    "  npz files can't be edited by hand, or read by non-pyrhon programs.  We'll go through\n",
    "  how to address these issues in another notebook"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "all",
   "notebook_metadata_filter": "all",
   "text_representation": {
    "extension": ".py",
    "format_name": "percent",
    "format_version": "1.2",
    "jupytext_version": "1.0.1"
   }
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "218.797px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
